'use client'

import React, { createContext, useContext, useEffect, useState, useRef } from 'react'
import { supabase } from '@/lib/supabase'
import type { User as SupabaseUser, Session } from '@supabase/supabase-js'

// Â∫îÁî®Áî®Êà∑Á±ªÂûãÂÆö‰πâ
export interface User {
  id: string
  email: string
  username: string
  role: 'admin' | 'user'
  created_at: string
  updated_at: string
  avatar_url?: string
}

interface AuthContextType {
  user: User | null
  profile: User | null
  loading: boolean
  isLoading: boolean
  isAuthenticated: boolean
  signIn: (email: string, password: string) => Promise<void>
  signUp: (email: string, password: string, username: string) => Promise<void>
  signOut: () => Promise<void>
  setProfile: (profile: User | null) => void
  setUser: (user: User | null) => void
  fetchProfile: (userId: string, force?: boolean) => Promise<void>
  refreshSession: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  // Áä∂ÊÄÅÁÆ°ÁêÜ
  const [user, setUser] = useState<User | null>(null)
  const [profile, setProfile] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const [isLoading, setIsLoading] = useState(false)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  
  const mountedRef = useRef(true)
  const initializingRef = useRef(false)
  const sessionCheckedRef = useRef(false)

  // Ëé∑ÂèñÁî®Êà∑ËµÑÊñô
  const fetchProfile = async (userId: string, force: boolean = false) => {
    if (!userId || !mountedRef.current || !supabase) return
    
    try {
      setIsLoading(true)
      
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single()

      if (error) {
        if (error.code === 'PGRST116') {
          // Áî®Êà∑‰∏çÂ≠òÂú®ÔºåÂàõÂª∫Êñ∞ËÆ∞ÂΩï
          await createUserProfile(userId)
        } else {
          console.error('‚ùå Error fetching profile:', error)
        }
        return
      }

      if (data && mountedRef.current) {
        console.log('‚úÖ Profile loaded:', data.email)
        setProfile(data)
      }
    } catch (error) {
      console.error('‚ùå Profile fetch failed:', error)
    } finally {
      if (mountedRef.current) {
        setIsLoading(false)
      }
    }
  }

  // ÂàõÂª∫Áî®Êà∑ËµÑÊñôËÆ∞ÂΩï
  const createUserProfile = async (userId: string) => {
    if (!supabase || !user) return
    
    try {
      const { data, error } = await supabase
        .from('users')
        .insert({
          id: userId,
          email: user.email,
          username: user.email.split('@')[0],
          role: user.email === 'admin@test.edu.cn' ? 'admin' : 'user'
        })
        .select()
        .single()

      if (error) throw error

      if (data && mountedRef.current) {
        console.log('‚úÖ User profile created:', data)
        setProfile(data)
      }
    } catch (error) {
      console.error('‚ùå Failed to create user profile:', error)
    }
  }

  // Âà∑Êñ∞‰ºöËØù
  const refreshSession = async () => {
    if (!supabase) return
    
    try {
      const { data: { session }, error } = await supabase.auth.refreshSession()
      
      if (error) {
        console.error('‚ùå Session refresh failed:', error)
        return
      }

      if (session?.user && mountedRef.current) {
        console.log('‚úÖ Session refreshed')
        await handleAuthUser(session.user)
      }
    } catch (error) {
      console.error('‚ùå Session refresh error:', error)
    }
  }

  // Â§ÑÁêÜËÆ§ËØÅÁî®Êà∑
  const handleAuthUser = async (authUser: SupabaseUser) => {
    if (!mountedRef.current) return

    const appUser: User = {
      id: authUser.id,
      email: authUser.email || '',
      username: authUser.user_metadata?.username || authUser.email?.split('@')[0] || 'User',
      role: authUser.email === 'admin@test.edu.cn' ? 'admin' : 'user',
      created_at: authUser.created_at,
      updated_at: authUser.updated_at || authUser.created_at,
      avatar_url: authUser.user_metadata?.avatar_url
    }

    console.log('üîÑ Setting authenticated user:', appUser.email)
    
    // ÂéüÂ≠êÊÄßÂú∞Êõ¥Êñ∞ÊâÄÊúâËÆ§ËØÅÁä∂ÊÄÅ
    setUser(appUser)
    setIsAuthenticated(true)
    
    // ÂºÇÊ≠•Ëé∑ÂèñÁî®Êà∑ËµÑÊñôÔºå‰ΩÜ‰∏çÈòªÂ°ûËÆ§ËØÅÁä∂ÊÄÅ
    setTimeout(() => {
      fetchProfile(authUser.id)
    }, 100)
  }

  // ÁôªÂΩï
  const signIn = async (email: string, password: string) => {
    if (!supabase) {
      throw new Error('Êï∞ÊçÆÂ∫ìËøûÊé•‰∏çÂèØÁî®')
    }

    console.log('üîÑ Attempting sign in for:', email)
    
    try {
      setLoading(true)
      
      const { data, error } = await supabase.auth.signInWithPassword({ 
        email, 
        password 
      })
      
      if (error) {
        console.error('‚ùå Sign in error:', error)
        throw new Error(error.message === 'Invalid login credentials' ? 'ÈÇÆÁÆ±ÊàñÂØÜÁ†ÅÈîôËØØ' : error.message)
      }

      if (data.user) {
        console.log('‚úÖ Sign in successful:', email)
        await handleAuthUser(data.user)
      }
    } catch (error) {
      console.error('‚ùå Sign in failed:', error)
      throw error
    } finally {
      if (mountedRef.current) {
        setLoading(false)
      }
    }
  }

  // Ê≥®ÂÜå
  const signUp = async (email: string, password: string, username: string) => {
    if (!supabase) {
      throw new Error('Êï∞ÊçÆÂ∫ìËøûÊé•‰∏çÂèØÁî®')
    }

    console.log('üîÑ Attempting sign up for:', email)
    
    try {
      setLoading(true)
      
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            username
          }
        }
      })
      
      if (error) {
        console.error('‚ùå Sign up error:', error)
        throw new Error(error.message)
      }

      if (data.user) {
        console.log('‚úÖ Sign up successful:', email)
        await handleAuthUser(data.user)
      }
    } catch (error) {
      console.error('‚ùå Sign up failed:', error)
      throw error
    } finally {
      if (mountedRef.current) {
        setLoading(false)
      }
    }
  }

  // ÁôªÂá∫
  const signOut = async () => {
    if (!supabase) return

    console.log('üîÑ Signing out...')
    
    try {
      setLoading(true)
      
      const { error } = await supabase.auth.signOut()
      
      if (error) {
        console.error('‚ùå Sign out error:', error)
        throw error
      }

      // Ê∏ÖÁêÜÁä∂ÊÄÅ
      if (mountedRef.current) {
        setUser(null)
        setProfile(null)
        setIsAuthenticated(false)
      }
      
      console.log('‚úÖ Sign out successful')
    } catch (error) {
      console.error('‚ùå Sign out failed:', error)
      throw error
    } finally {
      if (mountedRef.current) {
        setLoading(false)
      }
    }
  }

  // ÂàùÂßãÂåñËÆ§ËØÅÁä∂ÊÄÅ
  useEffect(() => {
    if (!supabase || initializingRef.current) return

    initializingRef.current = true
    console.log('üîÑ Initializing auth...')

    // Ê£ÄÊü•ÂΩìÂâç‰ºöËØù
    const checkSession = async () => {
      try {
        if (!supabase) {
          setIsAuthenticated(false)
          setLoading(false)
          return
        }
        
        const { data: { session }, error } = await supabase.auth.getSession()
        
        if (error) {
          console.error('‚ùå Session check error:', error)
        } else if (session?.user) {
          console.log('‚úÖ Existing session found:', session.user.email)
          await handleAuthUser(session.user)
        } else {
          console.log('‚ÑπÔ∏è No existing session')
          setIsAuthenticated(false)
        }
      } catch (error) {
        console.error('‚ùå Session initialization error:', error)
        setIsAuthenticated(false)
      } finally {
        if (mountedRef.current) {
          sessionCheckedRef.current = true
          setLoading(false)
        }
      }
    }

    checkSession()

    // ÁõëÂê¨ËÆ§ËØÅÁä∂ÊÄÅÂèòÂåñ
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üîÑ Auth state changed:', event, session?.user?.email)
        
        // Âè™ÊúâÂú®ÂàùÂßã‰ºöËØùÊ£ÄÊü•ÂÆåÊàêÂêéÊâçÂ§ÑÁêÜÁä∂ÊÄÅÂèòÂåñ
        if (!sessionCheckedRef.current && event !== 'INITIAL_SESSION') {
          return
        }
        
        switch (event) {
          case 'SIGNED_IN':
            if (session?.user && mountedRef.current) {
              await handleAuthUser(session.user)
            }
            break
            
          case 'SIGNED_OUT':
            if (mountedRef.current) {
              console.log('üîÑ User signed out')
              setUser(null)
              setProfile(null)
              setIsAuthenticated(false)
            }
            break
            
          case 'TOKEN_REFRESHED':
            if (session?.user && mountedRef.current) {
              console.log('üîÑ Token refreshed')
              await handleAuthUser(session.user)
            }
            break
        }
        
        if (mountedRef.current && sessionCheckedRef.current) {
          setLoading(false)
        }
      }
    )

    // Ê∏ÖÁêÜÂáΩÊï∞
    return () => {
      subscription.unsubscribe()
      initializingRef.current = false
    }
  }, [])

  // ÁªÑ‰ª∂Âç∏ËΩΩÊ∏ÖÁêÜ
  useEffect(() => {
    return () => {
      mountedRef.current = false
    }
  }, [])

  const value: AuthContextType = {
    user,
    profile,
    loading,
    isLoading,
    isAuthenticated,
    signIn,
    signUp,
    signOut,
    setProfile,
    setUser,
    fetchProfile,
    refreshSession
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
