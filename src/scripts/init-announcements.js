/**
 * ÂàùÂßãÂåñÂÖ¨ÂëäË°®ÁöÑËÑöÊú¨
 */

const { createClient } = require('@supabase/supabase-js')

// ‰ªéÁéØÂ¢ÉÂèòÈáèËé∑ÂèñÈÖçÁΩÆ
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase configuration. Please check your .env.local file.')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function initAnnouncementsTable() {
  try {
    console.log('üöÄ Initializing announcements table...')

    // ÂàõÂª∫ÂÖ¨ÂëäË°®ÁöÑSQL
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS announcements (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        title VARCHAR(100) NOT NULL,
        content TEXT NOT NULL,
        type VARCHAR(20) DEFAULT 'info' CHECK (type IN ('info', 'warning', 'success', 'error')),
        is_active BOOLEAN DEFAULT true,
        created_by VARCHAR(50) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `

    // ÂàõÂª∫Á¥¢ÂºïÁöÑSQL
    const createIndexesSQL = `
      CREATE INDEX IF NOT EXISTS idx_announcements_active ON announcements(is_active);
      CREATE INDEX IF NOT EXISTS idx_announcements_created_at ON announcements(created_at DESC);
      CREATE INDEX IF NOT EXISTS idx_announcements_type ON announcements(type);
    `

    // ÊâßË°åÂàõÂª∫Ë°®ÁöÑSQL
    const { error: tableError } = await supabase.rpc('exec_sql', { 
      sql: createTableSQL 
    })

    if (tableError) {
      console.error('‚ùå Error creating table:', tableError)
      return
    }

    console.log('‚úÖ Announcements table created successfully')

    // ÊâßË°åÂàõÂª∫Á¥¢ÂºïÁöÑSQL
    const { error: indexError } = await supabase.rpc('exec_sql', { 
      sql: createIndexesSQL 
    })

    if (indexError) {
      console.error('‚ùå Error creating indexes:', indexError)
      return
    }

    console.log('‚úÖ Indexes created successfully')

    // ÊèíÂÖ•Á§∫‰æãÊï∞ÊçÆ
    const { error: insertError } = await supabase
      .from('announcements')
      .insert([
        {
          title: 'Ê¨¢Ëøé‰ΩøÁî®Á†îÂ≠¶Ê∏ØÔºÅ',
          content: 'Á†îÂ≠¶Ê∏ØÊòØ‰∏Ä‰∏™ÂºÄÊîæÁöÑÂ≠¶ÊúØ‰∫§ÊµÅÂπ≥Âè∞ÔºåËá¥Âäõ‰∫éÁ™ÅÁ†¥‰º†ÁªüÁöÑ‰ø°ÊÅØËé∑ÂèñÊñπÂºèÔºåÂÆûÁé∞Áî®Êà∑‰πãÈó¥ÈöèÊó∂ÈöèÂú∞ÁöÑÂàÜ‰∫´Âíå‰∫§ÊµÅÔºÅ',
          type: 'info',
          created_by: 'admin'
        },
        {
          title: 'Á≥ªÁªüÁª¥Êä§ÈÄöÁü•',
          content: 'Á≥ªÁªüÂ∞Ü‰∫éÊú¨Âë®Êó•ÂáåÊô®2:00-4:00ËøõË°å‰æãË°åÁª¥Êä§ÔºåÊúüÈó¥ÂèØËÉΩ‰ºöÂΩ±ÂìçÈÉ®ÂàÜÂäüËÉΩÁöÑ‰ΩøÁî®ÔºåËØ∑ÊèêÂâçÂÅöÂ•ΩÂáÜÂ§á„ÄÇ',
          type: 'warning',
          created_by: 'admin'
        }
      ])

    if (insertError) {
      console.error('‚ùå Error inserting sample data:', insertError)
      return
    }

    console.log('‚úÖ Sample announcements inserted successfully')
    console.log('üéâ Announcements system initialized!')

  } catch (error) {
    console.error('‚ùå Error initializing announcements table:', error)
  }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
  initAnnouncementsTable()
    .then(() => {
      console.log('‚úÖ Initialization complete')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Initialization failed:', error)
      process.exit(1)
    })
}

module.exports = { initAnnouncementsTable }
