// background.js - 服务工作进程
class BackgroundManager {
  constructor() {
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.checkResearchopiaConnection();
  }

  setupEventListeners() {
    // 扩展安装时
    chrome.runtime.onInstalled.addListener((details) => {
      if (details.reason === 'install') {
        this.handleInstall();
      } else if (details.reason === 'update') {
        this.handleUpdate(details.previousVersion);
      }
    });

    // 标签页更新时
    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
      if (changeInfo.status === 'complete' && tab.url) {
        this.handleTabUpdate(tabId, tab);
      }
    });

    // 处理来自content script的消息
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      return this.handleMessage(request, sender, sendResponse);
    });

    // 处理扩展图标点击
    chrome.action.onClicked.addListener((tab) => {
      this.handleActionClick(tab);
    });
  }

  async handleInstall() {
    console.log('研学港扩展已安装');
    
    // 设置侧边栏行为
    if (chrome.sidePanel && chrome.sidePanel.setPanelBehavior) {
      try {
        await chrome.sidePanel.setPanelBehavior({ openPanelOnActionClick: true });
        console.log('✅ 侧边栏行为设置成功：点击扩展图标可直接打开侧边栏');
      } catch (error) {
        console.warn('⚠️ 设置侧边栏行为失败:', error);
      }
    }
    
    // 设置默认配置
    await chrome.storage.sync.set({
      floatingEnabled: true,
      researchopiaUrl: 'http://localhost:3000',
      autoDetectDOI: true,
      sidebarWidth: 400
    });

    // 显示欢迎页面
    chrome.tabs.create({
      url: chrome.runtime.getURL('welcome.html')
    });
  }

  async handleUpdate(previousVersion) {
    console.log(`研学港扩展已更新: ${previousVersion} -> ${chrome.runtime.getManifest().version}`);
  }

  async handleTabUpdate(tabId, tab) {
    // 检查是否为学术网站
    if (this.isAcademicSite(tab.url)) {
      // 更新扩展图标状态
      chrome.action.setBadgeText({
        text: 'DOI',
        tabId: tabId
      });
      
      chrome.action.setBadgeBackgroundColor({
        color: '#4ade80',
        tabId: tabId
      });
    } else {
      chrome.action.setBadgeText({
        text: '',
        tabId: tabId
      });
    }
  }

  handleMessage(request, sender, sendResponse) {
    console.log('📨 Background收到消息:', request.action);
    
    try {
      switch (request.action) {
        case 'detectDOI':
          this.handleDOIDetection(request, sender, sendResponse);
          return true; // 异步响应
          
        case 'openResearchopia':
          this.openResearchopia(request.doi).then(() => {
            sendResponse({ success: true });
          }).catch(error => {
            console.error('❌ openResearchopia error:', error);
            sendResponse({ success: false, error: error.message });
          });
          return true; // 异步响应
          
        case 'openSidePanel':
          this.openSidePanel(sender.tab, request.doi, request.url).then(result => {
            sendResponse({ success: result });
          }).catch(error => {
            console.error('❌ openSidePanel error:', error);
            sendResponse({ success: false, error: error.message });
          });
          return true; // 异步响应
          
        case 'checkConnection':
          this.checkResearchopiaConnection().then(() => {
            sendResponse({ success: true });
          }).catch(error => {
            console.error('❌ checkConnection error:', error);
            sendResponse({ success: false, error: error.message });
          });
          return true; // 异步响应
          
        case 'log':
          // 处理来自popup的日志消息
          console.log('📝 Popup日志:', request.message, '@', request.timestamp);
          sendResponse({ success: true });
          return false; // 同步响应
          
        default:
          console.warn('❌ 未知的action:', request.action);
          sendResponse({ success: false, error: 'Unknown action: ' + request.action });
          return false; // 同步响应
      }
    } catch (error) {
      console.error('❌ Background message handler error:', error);
      sendResponse({ success: false, error: error.message });
      return false;
    }
  }

  async openSidePanel(tab, doi, url) {
    try {
      // 保存DOI信息供侧边栏使用
      if (doi) {
        await chrome.storage.sync.set({ 
          doiFromContentScript: doi,
          currentPageUrl: url
        });
        console.log('💾 已保存DOI到storage:', doi);
      }

      // 由于sidePanel.open()需要用户手势，而从content script的消息无法传递用户手势上下文
      // 我们使用替代方案：通知用户点击扩展图标，或者尝试激活扩展图标
      console.log('⚠️ 无法直接从content script打开侧边栏（需要用户手势）');
      
      // 尝试高亮扩展图标提示用户点击
      if (chrome.action && chrome.action.setBadgeText) {
        await chrome.action.setBadgeText({
          text: '�',
          tabId: tab.id
        });
        
        await chrome.action.setBadgeBackgroundColor({
          color: '#4ade80',
          tabId: tab.id
        });
        
        // 3秒后清除高亮
        setTimeout(async () => {
          await chrome.action.setBadgeText({
            text: '',
            tabId: tab.id
          });
        }, 3000);
      }

      console.log('💡 已高亮扩展图标，提示用户点击打开侧边栏');
        
        // 额外验证：检查侧边栏是否真的打开了
        setTimeout(async () => {
          try {
            // 尝试向侧边栏发送消息来验证是否打开
            const response = await chrome.runtime.sendMessage({
              action: 'sidebarPing'
            });
            console.log('📡 侧边栏ping响应:', response);
          } catch (error) {
            console.log('📡 侧边栏ping失败（可能正常）:', error.message);
          }
        }, 500);
        
        return true;
      } else {
        console.log('⚠️ 原生侧边栏API不可用，chrome.sidePanel:', !!chrome.sidePanel, 'open方法:', !!(chrome.sidePanel && chrome.sidePanel.open));
        return false;
      }
    } catch (error) {
      console.error('❌ 打开侧边栏失败:', error);
      console.error('错误详情:', {
        message: error.message,
        name: error.name,
        stack: error.stack
      });
      return false;
    }
  }

  async handleDOIDetection(request, sender, sendResponse) {
    // 这里主要是协调工作，实际检测在content script中进行
    sendResponse({ success: true, message: 'DOI detection initiated' });
  }

  async openResearchopia(doi = null) {
    try {
      const settings = await chrome.storage.sync.get(['researchopiaUrl']);
      const baseUrl = settings.researchopiaUrl || 'http://localhost:3000';
      
      let url = baseUrl;
      if (doi) {
        url += `/?doi=${encodeURIComponent(doi)}&autoSearch=true`;
      }

      await chrome.tabs.create({
        url: url,
        active: true
      });
    } catch (error) {
      console.error('Failed to open Researchopia:', error);
    }
  }

  async checkResearchopiaConnection() {
    try {
      const settings = await chrome.storage.sync.get(['researchopiaUrl']);
      const baseUrl = settings.researchopiaUrl || 'http://localhost:3000';
      
      // 尝试连接研学港服务器
      const response = await fetch(baseUrl, { 
        method: 'HEAD',
        mode: 'no-cors'
      });
      
      console.log('Researchopia connection status:', response.ok ? 'Connected' : 'Disconnected');
      
      // 更新连接状态
      await chrome.storage.local.set({
        connectionStatus: response.ok ? 'connected' : 'disconnected',
        lastChecked: Date.now()
      });
    } catch (error) {
      console.log('Researchopia connection failed:', error.message);
      await chrome.storage.local.set({
        connectionStatus: 'disconnected',
        lastChecked: Date.now()
      });
    }
  }

  async handleActionClick(tab) {
    // 当用户点击扩展图标时的处理
    console.log('Extension icon clicked on:', tab.url);
  }

  isAcademicSite(url) {
    if (!url) return false;
    
    const academicSites = [
      'nature.com',
      'science.org',
      'ieee.org',
      'springer.com',
      'sciencedirect.com',
      'wiley.com',
      'tandfonline.com',
      'acm.org',
      'arxiv.org',
      'pubmed.ncbi.nlm.nih.gov',
      'doi.org'
    ];

    try {
      const hostname = new URL(url).hostname.toLowerCase();
      return academicSites.some(site => hostname.includes(site));
    } catch (error) {
      return false;
    }
  }
}

// 初始化背景脚本
new BackgroundManager();