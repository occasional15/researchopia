// sidebar.js - 侧边栏逻辑
class ResearchopiaSidebar {
  constructor() {
    this.iframe = null;
    this.currentDoi = null;
    this.researchopiaUrl =   hideLoading() {
    const loading = document.getElementById('loadingOverlay');
    const error = document.getElementById('errorContainer');
    
    loading.classList.add('hidden');
    error.classList.add('hidden');
  }

  showSuccess() {
    this.iframe.classList.remove('hidden');
  }

  showError() {
    const loading = document.getElementById('loadingOverlay');
    const error = document.getElementById('errorContainer');
    
    loading.classList.add('hidden');
    error.classList.remove('hidden');
    this.iframe.classList.add('hidden');
  }00';
    this.isLoaded = false;
    this.connectionAttempts = 0;
    this.maxAttempts = 3;
    
    this.init();
  }

  async init() {
    console.log('🚀 研学港侧边栏初始化...');
    
    // 加载设置
    await this.loadSettings();
    
    // 获取当前页面的DOI信息
    await this.getCurrentPageInfo();
    
    // 初始化iframe
    this.setupIframe();
    
    // 设置消息监听
    this.setupMessageListener();
    
    // 设置UI事件监听器
    this.setupEventListeners();
    
    // 检测服务器连接
    this.checkConnection();
  }

  async loadSettings() {
    try {
      const result = await chrome.storage.sync.get([
        'researchopiaUrl',
        'sidebarLastUrl',
        'doiFromContentScript'
      ]);
      
      this.researchopiaUrl = result.researchopiaUrl || 'http://localhost:3000';
      this.lastUrl = result.sidebarLastUrl;
      this.currentDoi = result.doiFromContentScript;
      
      console.log('📋 侧边栏设置加载完成:', {
        url: this.researchopiaUrl,
        doi: this.currentDoi,
        lastUrl: this.lastUrl
      });
    } catch (error) {
      console.error('设置加载失败:', error);
    }
  }

  async getCurrentPageInfo() {
    try {
      // 获取当前活动标签页
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      
      if (tab && tab.id) {
        // 向content script请求DOI信息
        const response = await chrome.tabs.sendMessage(tab.id, {
          action: 'getCurrentDOI'
        });
        
        if (response && response.success && response.doi) {
          this.currentDoi = response.doi;
          console.log('📄 获取当前页面DOI:', this.currentDoi);
        }
      }
    } catch (error) {
      console.log('无法获取当前页面信息:', error.message);
    }
  }

  setupIframe() {
    this.iframe = document.getElementById('researchopiaFrame');
    
    // 构建URL
    let targetUrl = this.researchopiaUrl;
    
    // 如果有DOI，添加搜索参数（但不自动搜索）
    if (this.currentDoi) {
      targetUrl += `/?doi=${encodeURIComponent(this.currentDoi)}`;
      console.log('🔗 构建带DOI的URL:', targetUrl);
    } else if (this.lastUrl) {
      // 如果没有新DOI但有上次的URL，恢复上次状态
      targetUrl = this.lastUrl;
      console.log('🔄 恢复上次URL:', targetUrl);
    }
    
    this.iframe.src = targetUrl;
    
    // iframe加载事件
    this.iframe.onload = () => {
      this.hideLoading();
      this.showSuccess();
      this.isLoaded = true;
      
      // 保存当前URL
      chrome.storage.sync.set({ sidebarLastUrl: targetUrl });
      
      console.log('✅ 研学港页面加载完成');
    };
    
    this.iframe.onerror = () => {
      this.showError();
      console.error('❌ 研学港页面加载失败');
    };
  }

  async checkConnection() {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch(this.researchopiaUrl, {
        method: 'HEAD',
        mode: 'no-cors',
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      this.updateConnectionStatus(true);
      
    } catch (error) {
      console.warn('服务器连接检查失败:', error.message);
      this.updateConnectionStatus(false);
      
      // 如果连接失败且没有加载成功，显示错误
      setTimeout(() => {
        if (!this.isLoaded) {
          this.showError();
        }
      }, 3000);
    }
  }

  updateConnectionStatus(connected) {
    const indicator = document.getElementById('connectionStatus');
    if (connected) {
      indicator.style.background = '#4ade80';
      indicator.title = '服务器连接正常';
    } else {
      indicator.style.background = '#ef4444';
      indicator.title = '服务器连接异常';
    }
  }

  hideLoading() {
    const loading = document.getElementById('loadingOverlay');
    const error = document.getElementById('errorContainer');
    
    loading.style.display = 'none';
    error.style.display = 'none';
  }

  showSuccess() {
    this.iframe.style.display = 'block';
  }

  showError() {
    const loading = document.getElementById('loadingOverlay');
    const error = document.getElementById('errorContainer');
    
    loading.style.display = 'none';
    error.style.display = 'block';
    this.iframe.style.display = 'none';
    
    this.updateConnectionStatus(false);
  }

  setupMessageListener() {
    // 监听来自其他扩展组件的消息
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      console.log('📨 侧边栏收到消息:', request);
      
      switch (request.action) {
        case 'updateDOI':
          this.handleDOIUpdate(request.doi);
          sendResponse({ success: true });
          break;
          
        case 'refreshSidebar':
          this.refresh();
          sendResponse({ success: true });
          break;
          
        case 'getSidebarStatus':
          sendResponse({ 
            success: true, 
            loaded: this.isLoaded,
            doi: this.currentDoi,
            url: this.iframe ? this.iframe.src : null
          });
          break;
          
        default:
          sendResponse({ success: false, error: 'Unknown action' });
      }
      
      return true;
    });
  }

  setupEventListeners() {
    // 重试按钮事件监听器
    const retryBtn = document.getElementById('retryBtn');
    if (retryBtn) {
      retryBtn.addEventListener('click', () => {
        console.log('🔄 用户点击重试连接');
        this.retryConnection();
      });
    }
    
    // 设置按钮
    const settingsBtn = document.getElementById('settingsBtn');
    if (settingsBtn) {
      settingsBtn.addEventListener('click', () => {
        this.toggleSettingsPanel();
      });
    }
    
    // 关闭设置按钮
    const closeSettingsBtn = document.getElementById('closeSettingsBtn');
    if (closeSettingsBtn) {
      closeSettingsBtn.addEventListener('click', () => {
        this.hideSettingsPanel();
      });
    }
    
    // 悬浮图标切换按钮
    const toggleFloatBtn = document.getElementById('toggleFloatBtn');
    if (toggleFloatBtn) {
      toggleFloatBtn.addEventListener('click', () => {
        this.toggleFloatingIcon();
      });
    }
    
    // DOI检测按钮
    const detectDOIBtn = document.getElementById('detectDOIBtn');
    if (detectDOIBtn) {
      detectDOIBtn.addEventListener('click', () => {
        this.detectCurrentDOI();
      });
    }
    
    // 保存设置按钮
    const saveSettingsBtn = document.getElementById('saveSettingsBtn');
    if (saveSettingsBtn) {
      saveSettingsBtn.addEventListener('click', () => {
        this.saveSettings();
      });
    }
    
    // 重置设置按钮
    const resetSettingsBtn = document.getElementById('resetSettingsBtn');
    if (resetSettingsBtn) {
      resetSettingsBtn.addEventListener('click', () => {
        this.resetSettings();
      });
    }
    
    console.log('🎛️ 侧边栏事件监听器设置完成');
  }

  retryConnection() {
    console.log('🔄 重试连接...');
    this.connectionAttempts = 0;
    this.checkConnection();
  }

  toggleSettingsPanel() {
    const panel = document.getElementById('settingsPanel');
    if (panel.style.display === 'none') {
      this.showSettingsPanel();
    } else {
      this.hideSettingsPanel();
    }
  }

  showSettingsPanel() {
    const panel = document.getElementById('settingsPanel');
    panel.style.display = 'block';
    
    // 更新设置面板的显示内容
    this.updateSettingsDisplay();
  }

  hideSettingsPanel() {
    const panel = document.getElementById('settingsPanel');
    panel.style.display = 'none';
  }

  updateSettingsDisplay() {
    // 更新DOI显示
    const doiDisplay = document.getElementById('currentDOIDisplay');
    if (doiDisplay) {
      doiDisplay.textContent = this.currentDoi || '未检测到';
      doiDisplay.title = this.currentDoi || '未检测到DOI';
    }
    
    // 更新服务器URL
    const urlInput = document.getElementById('serverUrlInput');
    if (urlInput) {
      urlInput.value = this.researchopiaUrl;
    }
  }

  async toggleFloatingIcon() {
    try {
      // 获取当前标签页
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      
      if (tab && tab.id) {
        const response = await chrome.tabs.sendMessage(tab.id, {
          action: 'toggleFloating',
          enabled: true
        });
        
        console.log('📌 悬浮图标切换结果:', response);
      }
    } catch (error) {
      console.error('❌ 切换悬浮图标失败:', error);
    }
  }

  async detectCurrentDOI() {
    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      
      if (tab && tab.id) {
        const response = await chrome.tabs.sendMessage(tab.id, {
          action: 'detectDOI'
        });
        
        if (response && response.success && response.doi) {
          this.currentDoi = response.doi;
          this.updateSettingsDisplay();
          console.log('🔍 重新检测到DOI:', response.doi);
        } else {
          console.log('⚠️ 未检测到DOI');
        }
      }
    } catch (error) {
      console.error('❌ DOI检测失败:', error);
    }
  }

  async saveSettings() {
    const urlInput = document.getElementById('serverUrlInput');
    
    if (urlInput) {
      const newUrl = urlInput.value.trim();
      if (newUrl && newUrl !== this.researchopiaUrl) {
        this.researchopiaUrl = newUrl;
        
        // 保存到存储
        await chrome.storage.sync.set({
          researchopiaUrl: newUrl
        });
        
        console.log('💾 设置已保存:', newUrl);
        
        // 重新加载iframe
        this.loadResearchopia();
      }
    }
  }

  async resetSettings() {
    // 重置为默认值
    this.researchopiaUrl = 'http://localhost:3000';
    
    await chrome.storage.sync.set({
      researchopiaUrl: this.researchopiaUrl
    });
    
    // 更新显示
    this.updateSettingsDisplay();
    
    // 重新加载
    this.loadResearchopia();
    
    console.log('🔄 设置已重置');
  }

  handleDOIUpdate(newDoi) {
    if (newDoi && newDoi !== this.currentDoi) {
      console.log('🔄 更新侧边栏DOI:', newDoi);
      this.currentDoi = newDoi;
      
      // 不自动刷新，只更新URL以备后续使用
      const newUrl = `${this.researchopiaUrl}/?doi=${encodeURIComponent(newDoi)}`;
      chrome.storage.sync.set({ 
        doiFromContentScript: newDoi,
        sidebarLastUrl: newUrl
      });
    }
  }

  refresh() {
    if (this.iframe) {
      this.iframe.src = this.iframe.src;
      this.showLoading();
    }
  }

  showLoading() {
    const loading = document.getElementById('loadingOverlay');
    const error = document.getElementById('errorContainer');
    
    loading.style.display = 'flex';
    error.style.display = 'none';
    this.iframe.style.display = 'none';
    this.isLoaded = false;
  }
}

// 全局重试函数
window.retryConnection = function() {
  if (window.sidebarInstance) {
    window.sidebarInstance.showLoading();
    window.sidebarInstance.checkConnection();
    
    // 重新加载iframe
    setTimeout(() => {
      if (window.sidebarInstance.iframe) {
        window.sidebarInstance.iframe.src = window.sidebarInstance.iframe.src;
      }
    }, 500);
  }
};

// 初始化
document.addEventListener('DOMContentLoaded', () => {
  window.sidebarInstance = new ResearchopiaSidebar();
});

// 页面卸载时保存状态
window.addEventListener('beforeunload', () => {
  if (window.sidebarInstance && window.sidebarInstance.iframe) {
    chrome.storage.sync.set({
      sidebarLastUrl: window.sidebarInstance.iframe.src
    });
  }
});